{"version":3,"sources":["images/share.svg","images/marce.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","sounds","src","title","extra","SoundButton","this","sound","currentTime","play","fetch","props","audioRequest","blob","audioBlob","audioFile","File","type","console","log","navigator","canShare","files","share","text","then","catch","error","_this","react_default","a","createElement","className","ref","el","controls","preload","onMouseDown","e","handleMouseDown","onMouseUp","handleMouseUp","onClick","handleShare","React","Component","App","require","alt","map","i","App_SoundButton","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gICAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8LCIlCC,SAAS,CACb,CAAEC,IAAK,oBAAqBC,MAAO,UACnC,CAAED,IAAK,oBAAqBC,MAAO,UACnC,CAAED,IAAK,qBAAsBC,MAAO,eACpC,CAAED,IAAK,mBAAoBC,MAAO,SAClC,CAAED,IAAK,+BAAgCC,MAAO,mBAC9C,CAAED,IAAK,sBAAuBC,MAAO,aACrC,CAAED,IAAK,8BAA+BC,MAAO,uBAC7C,CAAED,IAAK,oBAAqBC,MAAO,YACnC,CAAED,IAAK,kBAAmBC,MAAO,QACjC,CAAED,IAAK,wBAAyBC,MAAO,cACvC,CAAED,IAAK,yBAA0BC,MAAO,cAAeC,OAAO,SAkB1DC,4LAGFC,KAAKC,MAAMC,YAAc,EACzBF,KAAKC,MAAME,wNASgBC,MAAMJ,KAAKK,MAAMJ,MAAML,mBAA5CU,kBACkBA,EAAaC,cAA/BC,SACAC,EAAY,IAAIC,KAAK,CAACF,GAAY,gBAAiB,CAAEG,KAAM,cAEjEC,QAAQC,IAAIJ,GACRK,UAAUC,UAAYD,UAAUC,SAAS,CAAEC,MAAO,CAACP,KACrDK,UAAUG,MAAM,CACdD,MAAO,CAACP,GACRZ,MAAO,WACPqB,KAAM,kBAEPC,KAAK,kBAAMP,QAAQC,IAAI,2BACvBO,MAAM,SAACC,GAAD,OAAWT,QAAQC,IAAI,iBAAkBQ,KAEhDT,QAAQC,IAAR,iLAIK,IAAAS,EAAAtB,KACP,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOE,IAAK,SAACC,GAAD,OAAQN,EAAKrB,MAAQ2B,GAAKhC,IAAKI,KAAKK,MAAMJ,MAAML,IAAKiC,UAAQ,EAACC,QAAQ,SAClFP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeK,YAAa,SAACC,GAAD,OAAOV,EAAKW,gBAAgBD,IAAIE,UAAW,SAACF,GAAD,OAAOV,EAAKa,cAAcH,KAAKhC,KAAKK,MAAMJ,MAAMJ,OACzI0B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeU,QAAS,SAACJ,GAAD,OAAOV,EAAKe,YAAYL,KAChET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAY9B,IAAKqB,eArChBqB,IAAMC,WA4CjBC,EA1Df,WACE,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAK7B,IAAK6C,EAAQ,IAAuBC,IAAI,MAE/CnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZ/B,EAAOgD,IAAI,SAAC1C,EAAO2C,GAAR,OAAcrB,EAAAC,EAAAC,cAACoB,EAAD,CAAaC,IAAKF,EAAG3C,MAAOA,SCf1C8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.a1dd6038.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/share.48aa7a1c.svg\";","module.exports = __webpack_public_path__ + \"static/media/marce.b2b90410.png\";","import React from 'react';\r\nimport share from './images/share.svg';\r\nimport './App.css';\r\n\r\nconst sounds = [\r\n  { src: 'sounds/falopa.mp3', title: 'Falopa' },\r\n  { src: 'sounds/famoso.mp3', title: 'Famoso' },\r\n  { src: 'sounds/mechupa.mp3', title: 'Me chupa...' },\r\n  { src: 'sounds/pingo.mp3', title: 'Pingo' },\r\n  { src: 'sounds/sos-bastante-puto.mp3', title: 'Sos bastante...' },\r\n  { src: 'sounds/enamorar.ogg', title: 'Enamorado' },\r\n  { src: 'sounds/manga-de-pajeros.mp3', title: 'Manga de pajeros...' },\r\n  { src: 'sounds/sisisi.mp3', title: 'Si si si' },\r\n  { src: 'sounds/pija.ogg', title: 'Pija' },\r\n  { src: 'sounds/te-la-puso.mp3', title: 'Te la puso' },\r\n  { src: 'sounds/az-querido.opus', title: 'Az querido!', extra: true },\r\n]\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Botoncelo</h1>\r\n        <img src={require('./images/marce.png')} alt=\"\"/>\r\n      </header>\r\n      <div className=\"sound-list\">\r\n        {sounds.map((sound, i) => <SoundButton key={i} sound={sound} />)}\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nclass SoundButton extends React.Component {\r\n\r\n  handleMouseDown() {\r\n    this.sound.currentTime = 0;\r\n    this.sound.play();\r\n  }\r\n\r\n  handleMouseUp() {\r\n    //this.sound.currentTime = 0;\r\n    //this.sound.pause();\r\n  }\r\n\r\n  async handleShare() {\r\n    const audioRequest = await fetch(this.props.sound.src);\r\n    const audioBlob = await audioRequest.blob();\r\n    const audioFile = new File([audioBlob], 'botoncelo.mp3', { type: 'audio/mp3' });\r\n    \r\n    console.log(audioFile)\r\n    if (navigator.canShare && navigator.canShare({ files: [audioFile] })) {\r\n      navigator.share({\r\n        files: [audioFile],\r\n        title: 'Pictures',\r\n        text: 'Our Pictures.',\r\n      })\r\n      .then(() => console.log('Share was successful.'))\r\n      .catch((error) => console.log('Sharing failed', error));\r\n    } else {\r\n      console.log(`Your system doesn't support sharing files.`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sound-box\">\r\n        <audio ref={(el) => this.sound = el } src={this.props.sound.src} controls preload=\"true\" />\r\n        <button className=\"sound-button\" onMouseDown={(e) => this.handleMouseDown(e)} onMouseUp={(e) => this.handleMouseUp(e)}>{this.props.sound.title}</button>\r\n        <button className=\"share-button\" onClick={(e) => this.handleShare(e)}>\r\n          <img className=\"share-img\" src={share} />\r\n        </button>\r\n      </div>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}